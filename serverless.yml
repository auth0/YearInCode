service: nebula-serverless

# app and org for use with dashboard.serverless.com
app: nebula
org: stackbuilders

frameworkVersion: '2'

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  profile: ${opt:profile, self:custom.profiles.${self:custom.stage}}
  stackName: ${self:service}-${self:custom.stage}
  region: us-east-1
  environment:
    AUTH0_DOMAIN: ${ssm:/${self:custom.stage}/auth0/domain}
    AUTH0_AUDIENCE: ${ssm:/${self:custom.stage}/auth0/audience}
    AUTH0_CLIENT_ID: ${ssm:/${self:custom.stage}/auth0/client_id}
    AUTH0_CLIENT_SECRET: ${ssm:/${self:custom.stage}/auth0/client_secret~true}
    JWT_TOKEN_ISSUER: ${ssm:/${self:custom.stage}/jwt/token_issuer}
    JWKS_URI: ${ssm:/${self:custom.stage}/jwt/jwks_uri}
    POSTER_TABLE: ${self:custom.poster-table}
    CONNECTION_TABLE: ${self:custom.connection-table}
    STAGE: ${self:custom.stage}
  lambdaHashingVersion: 20201221
  apiGateway:
    shouldStartNameWithService: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'execute-api:Invoke'
      Resource:
        - 'arn:aws:execute-api:*:*:**/@connections/*'
    - Effect: 'Allow'
      Action:
        - sqs:SendMessage
        - sqs:DeleteMessage
      Resource:
        Fn::GetAtt: [PosterQueue, Arn]
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*'

custom:
  stage: ${opt:stage, self:provider.stage, 'dev'}
  poster-table: ${self:service}-poster-${self:custom.stage}
  connection-table: ${self:service}-connection-${self:custom.stage}
  profiles:
    dev: nebulaDev
    staging: nebulaStaging
    prod: nebulaProduction
  logs:
    restApi: true
  serverless-offline:
    httpPort: 1337
  functionsBasePath: api
  webpack:
    webpackConfig: api/webpack.config.js
    includeModules:
      forceInclude:
        - uuid
    packager: 'yarn'
    packagerOptions:
      scripts:
        - npx del-cli node_modules/aws-sdk "node_modules/**/@types/**"
          "node_modules/**/*.d.ts" "node_modules/**/.bin"
  serverless-offline-sqs:
    autoCreate: true
    apiVersion: '2012-11-05'
    endpoint: http://0.0.0.0:9324
    region: us-east-1
    accessKeyId: local
    secretAccessKey: local
    skipCacheInvalidation: false
  dotenv:
    logging: false
    required:
      file: true
  dynamodb: # DynamoDB Local Instance
    stages:
      - dev
    start:
      host: localhost
      port: '8000' # the port of our Dynamo docker container
      noStart: true
      migrate: true

functions:
  authorize:
    handler: auth/authorize.authorize

  authorizeWS:
    handler: auth/authorizeWS.authorizeWS
    environment:
      WEBSOCKET_PAYLOAD_SECRET: ${ssm:/${self:custom.stage}/websocket/payload_secret~true}

  queuePoster:
    handler: posters/queuePoster.queuePoster
    environment:
      SQS_QUEUE_URL: {Ref: PosterQueue}
    events:
      - http:
          path: api/posters/queue
          method: post
          authorizer: authorize
          cors: true

  getStatus:
    handler: posters/getStatus.getStatus
    events:
      - http:
          path: api/posters/status
          method: get
          authorizer: authorize
          cors: true

  getPosterBySlug:
    handler: posters/getPosterBySlug.getPosterBySlug
    events:
      - http:
          path: api/posters/{slug}
          method: get
          cors: true

  connect:
    handler: posters/connect.connect
    environment:
      WEBSOCKET_PAYLOAD_SECRET: ${ssm:/${self:custom.stage}/websocket/payload_secret~true}
    events:
      - websocket:
          route: $connect
          authorizer:
            name: authorizeWS
            identitySource:
              - 'route.request.querystring.wsPayload'

  disconnect:
    handler: posters/disconnect.disconnect
    events:
      - websocket:
          route: $disconnect

  start:
    handler: posters/start.start
    timeout: 900
    reservedConcurrency: 8 # No more than 8 concurrent invocations
    environment:
      WEBSOCKET_API_ENDPOINT:
        Fn::Join:
          - ''
          - - Ref: WebsocketsApi
            - .execute-api.
            - Ref: AWS::Region
            - .amazonaws.com/
            - ${self:custom.stage}
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - PosterQueue
              - Arn

resources:
  Resources:
    PosterQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: sqs-poster-queue-${self:custom.stage}
        VisibilityTimeout: 900
    ConnectionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.connection-table}
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
    PosterTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.poster-table}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: posterSlug
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: posterSlugIndex
            KeySchema:
              - AttributeName: posterSlug
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

plugins:
  - serverless-dotenv-plugin
  - serverless-functions-base-path
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline-sqs
  - serverless-offline
