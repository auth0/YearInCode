service: nebula-serverless

# app and org for use with dashboard.serverless.com
app: nebula
org: stackbuilders

frameworkVersion: '2'

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  profile: ${self:custom.profiles.${self:custom.stage}}
  stackName: ${self:service}-${self:provider.stage}
  region: us-east-1
  environment:
    AUTH0_DOMAIN: ${ssm:/${self:custom.stage}/auth0/domain}
    AUTH0_AUDIENCE: ${ssm:/${self:custom.stage}/auth0/audience}
    AUTH0_CLIENT_ID: ${ssm:/${self:custom.stage}/auth0/client_id}
    AUTH0_CLIENT_SECRET: ${ssm:/${self:custom.stage}/auth0/client_secret~true}
    JWT_TOKEN_ISSUER: ${ssm:/${self:custom.stage}/jwt/token_issuer}
    JWKS_URI: ${ssm:/${self:custom.stage}/jwt/jwks_uri}
    DEATH_STAR_TABLE: ${self:custom.death-star-table}
  lambdaHashingVersion: 20201221
  apiGateway:
    shouldStartNameWithService: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'execute-api:Invoke'
      Resource:
        - 'arn:aws:execute-api:*:*:**/@connections/*'
    - Effect: 'Allow'
      Action:
        - sqs:SendMessage
        - sqs:DeleteMessage
      Resource:
        Fn::GetAtt: [StarQueue, Arn]
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*'

custom:
  stage: ${opt:stage, self:provider.stage, 'dev'}
  death-star-table: ${self:service}-death-star-${self:custom.stage}
  profiles:
    dev: nebula-dev
    staging: nebula-staging
  logs:
    restApi: true
  serverless-offline:
    httpPort: 1337
  functionsBasePath: api
  webpack:
    webpackConfig: api/webpack.config.js
    includeModules:
      forceInclude:
        - uuid
    packager: 'yarn'
    packagerOptions:
      scripts:
        - npx del-cli node_modules/aws-sdk "node_modules/**/@types/**"
          "node_modules/**/*.d.ts" "node_modules/**/.bin"
  serverless-offline-sqs:
    autoCreate: true
    apiVersion: '2012-11-05'
    endpoint: http://0.0.0.0:9324
    region: us-east-1
    accessKeyId: local
    secretAccessKey: local
    skipCacheInvalidation: false
  dotenv:
    path: .env.local
    logging: false
  capacities: # DynamoDB Auto Scaling
    - table: DeathStar
      index:
        - connectionIdIndex
      read:
        minimum: 31 # Minimum read capacity
        maximum: 1000 # Maximum read capacity
        usage: 0.75 # Targeted usage percentage
      write:
        minimum: 40 # Minimum write capacity
        maximum: 200 # Maximum write capacity
        usage: 0.5 # Targeted usage percentage
  dynamodb: # DynamoDB Local Instance
    stages:
      - dev
    start:
      host: localhost
      port: '8000' # the port of our Dynamo docker container
      noStart: true
      migrate: true

functions:
  authorize:
    handler: auth/authorize.default

  authorizeWS:
    handler: auth/authorizeWS.default
    environment:
      WEBSOCKET_PAYLOAD_SECRET: ${ssm:/${self:custom.stage}/websocket/payload_secret~true}

  queueStar:
    handler: death-star/queueStar.default
    environment:
      SQS_QUEUE_URL: {Ref: StarQueue}
    events:
      - http:
          path: api/death-star/queue
          method: post
          authorizer: authorize
          cors: true

  getStatus:
    handler: death-star/getStatus.default
    events:
      - http:
          path: api/death-star/status
          method: get
          authorizer: authorize
          cors: true

  connect:
    handler: death-star/connect.default
    environment:
      WEBSOCKET_PAYLOAD_SECRET: ${ssm:/${self:custom.stage}/websocket/payload_secret~true}
    events:
      - websocket:
          route: $connect
          authorizer:
            name: authorizeWS
            identitySource:
              - 'route.request.querystring.wsPayload'

  disconnect:
    handler: death-star/disconnect.default
    events:
      - websocket:
          route: $disconnect

  start:
    handler: death-star/start.default
    timeout: 900
    reservedConcurrency: 8 # No more than 8 concurrent invocations
    environment:
      WEBSOCKET_API_ENDPOINT:
        Fn::Join:
          - ''
          - - Ref: WebsocketsApi
            - .execute-api.
            - Ref: AWS::Region
            - .amazonaws.com/
            - ${self:custom.stage}
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - StarQueue
              - Arn

resources:
  Resources:
    StarQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: sqs-star-queue-${self:custom.stage}
        VisibilityTimeout: 900
    DeathStar:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.death-star-table}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: connectionStatus
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: connectionIdIndex
            KeySchema:
              - AttributeName: connectionId
                KeyType: HASH
              - AttributeName: connectionStatus
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 3
              WriteCapacityUnits: 3
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'

plugins:
  - serverless-dotenv-plugin
  - serverless-functions-base-path
  - serverless-dynamodb-autoscaling
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline-sqs
  - serverless-offline
